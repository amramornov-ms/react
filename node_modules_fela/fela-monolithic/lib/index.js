'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = monolithic

var _objectReduce = require('fast-loops/lib/objectReduce')

var _objectReduce2 = _interopRequireDefault(_objectReduce)

var _cssifyObject = require('css-in-js-utils/lib/cssifyObject')

var _cssifyObject2 = _interopRequireDefault(_cssifyObject)

var _isobject = require('isobject')

var _isobject2 = _interopRequireDefault(_isobject)

var _felaUtils = require('fela-utils')

var _generateMonolithicClassName = require('./generateMonolithicClassName')

var _generateMonolithicClassName2 = _interopRequireDefault(_generateMonolithicClassName)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    })
  } else {
    obj[key] = value
  }
  return obj
}

function useMonolithicRenderer(renderer) {
  var prettySelectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false

  renderer.prettySelectors = prettySelectors

  renderer._renderStyleToCache = function(className, style) {
    var pseudo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ''
    var media = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ''
    var support = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ''

    var ruleSet = (0, _objectReduce2.default)(
      style,
      function(ruleset, value, property) {
        if ((0, _isobject2.default)(value)) {
          if ((0, _felaUtils.isNestedSelector)(property)) {
            renderer._renderStyleToCache(
              className,
              value,
              pseudo + (0, _felaUtils.normalizeNestedProperty)(property),
              media,
              support,
            )
          } else if ((0, _felaUtils.isMediaQuery)(property)) {
            var combinedMediaQuery = (0, _felaUtils.generateCombinedMediaQuery)(
              media,
              property.slice(6).trim(),
            )

            renderer._renderStyleToCache(className, value, pseudo, combinedMediaQuery, support)
          } else if ((0, _felaUtils.isSupport)(property)) {
            var combinedSupport = (0, _felaUtils.generateCombinedMediaQuery)(
              support,
              property.slice(9).trim(),
            )
            renderer._renderStyleToCache(className, value, pseudo, media, combinedSupport)
          } else {
            console.warn(
              'The object key "' +
                property +
                '" is not a valid nested key in Fela. \nMaybe you forgot to add a plugin to resolve it? \nCheck http://fela.js.org/docs/basics/Rules.html#styleobject for more information.',
            )
          }
        } else if (!(0, _felaUtils.isUndefinedValue)(value)) {
          ruleset[property] = value
        }

        return ruleset
      },
      {},
    )

    if (Object.keys(ruleSet).length > 0) {
      var css = (0, _cssifyObject2.default)(ruleSet)
      var selector = (0, _felaUtils.generateCSSSelector)(className, pseudo)

      var change = {
        type: _felaUtils.RULE_TYPE,
        className: className,
        selector: selector,
        declaration: css,
        media: media,
        pseudo: pseudo,
        support: support,
      }

      var declarationReference = selector + media + support
      renderer.cache[declarationReference] = change
      renderer._emitChange(change)
    }
  }

  renderer._renderStyleToClassNames = function(style, rule) {
    if (Object.keys(style).length < 1) {
      return ''
    }

    var localRulePrefix =
      renderer.prettySelectors && (rule.ruleName || rule.name)
        ? (rule.ruleName || rule.name) + '_'
        : ''

    var className = (0, _generateMonolithicClassName2.default)(
      style,
      (renderer.selectorPrefix || '') + (rule.selectorPrefix || localRulePrefix),
    )

    if (!renderer.cache.hasOwnProperty(className)) {
      renderer._renderStyleToCache(className, style)
      renderer.cache[className] = {}
    }

    return className
  }

  renderer.renderRule = function(rule) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}
    return renderer._renderStyle(rule(props, renderer), props, rule)
  }

  renderer._renderStyle = function() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}
    var rule = arguments[2]

    var processedStyle = (0, _felaUtils.processStyleWithPlugins)(
      renderer,
      style,
      _felaUtils.RULE_TYPE,
      props,
    )

    return renderer._renderStyleToClassNames(processedStyle, rule || {})
  }

  renderer.subscribe(function(event) {
    if (event.type === 'REHYDRATATION_FINISHED') {
      // Repair cache for monolithic usage
      renderer.cache = Object.keys(renderer.cache).reduce(function(acc, key) {
        var item = renderer.cache[key]
        if (item.type === 'RULE') {
          return Object.assign(
            acc,
            _defineProperty({}, item.className + item.media + item.support, item),
          )
        }
        return Object.assign(acc, _defineProperty({}, key, item))
      }, {})
    }
  })

  return renderer
}

function monolithic() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}

  return function(renderer) {
    return useMonolithicRenderer(
      renderer,
      process.env.NODE_ENV !== 'production' && options.prettySelectors,
    )
  }
}
